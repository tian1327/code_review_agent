{
  "PROBLEM STATEMENT": "# Problem Statement\n\nThis PR addresses a critical bug in the xarray library where the \nDataArray.sel() method was not properly handling multi-dimensional \nindexing with boolean arrays.\n\n## Issue Description\n- The sel() method was failing when users tried to select data using \n  boolean arrays with dimensions that didn't match the expected shape\n- This caused runtime errors in data analysis workflows\n- Affected users working with climate and scientific data\n\n## Proposed Solution\n- Add proper dimension checking in the sel() method\n- Implement graceful error handling for mismatched dimensions\n- Add comprehensive test coverage for edge cases\n\n## Impact\n- Fixes data selection issues for scientific computing users\n- Improves robustness of xarray operations\n- Maintains backward compatibility",  
  "PATCH": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex a1b2c3d..e4f5g6h 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1234,6 +1234,15 @@ class DataArray(AbstractArray, DataWithCoords):\n         if not isinstance(indexers, dict):\n             raise TypeError(\"indexers must be a dict\")\n         \n+        # Validate boolean array dimensions\n+        for key, value in indexers.items():\n+            if hasattr(value, 'shape') and len(value.shape) > 0:\n+                expected_shape = self.coords[key].shape\n+                if value.shape != expected_shape:\n+                    raise ValueError(\n+                        f\"Boolean array shape {value.shape} does not match \"\n+                        f\"expected shape {expected_shape} for coordinate '{key}'\"\n+                    )\n         \n         # Apply selection\n         result = self._obj.sel(indexers, method=method, tolerance=tolerance)",
  "TEST PATCH": "import pytest\nimport numpy as np\nimport xarray as xr\n\ndef test_sel_boolean_array_validation():\n    \"\"\"Test that sel() properly validates boolean array dimensions.\"\"\"\n    \n    # Create test data\n    data = np.random.randn(10, 20)\n    coords = {\n        'x': np.arange(10),\n        'y': np.arange(20)\n    }\n    da = xr.DataArray(data, coords=coords)\n    \n    # Test valid boolean array\n    valid_mask = np.random.choice([True, False], size=(10, 20))\n    result = da.sel(x=valid_mask)\n    assert result is not None\n    \n    # Test invalid boolean array (should raise error)\n    invalid_mask = np.random.choice([True, False], size=(5, 10))\n    with pytest.raises(ValueError, match=\"Boolean array shape\"):\n        da.sel(x=invalid_mask)\n\ndef test_sel_boolean_array_edge_cases():\n    \"\"\"Test edge cases for boolean array selection.\"\"\"\n    \n    data = np.random.randn(5, 5)\n    coords = {'x': np.arange(5), 'y': np.arange(5)}\n    da = xr.DataArray(data, coords=coords)\n    \n    # Test empty boolean array\n    empty_mask = np.array([], dtype=bool)\n    with pytest.raises(ValueError):\n        da.sel(x=empty_mask)\n    \n    # Test scalar boolean\n    scalar_bool = True\n    result = da.sel(x=scalar_bool)\n    assert result is not None"
} 